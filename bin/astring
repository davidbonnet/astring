#!/usr/bin/env node

var astring =  require( '../dist/astring' )
var version = require( '../package' ).version
var fs = require( 'fs' )
var path = require( 'path' )


var argv = process.argv.slice( 2 )
var length = argv.length
var options = {
	indent: '\t',
	lindeEnd: '\n',
	startingIndentLevel: 0
}
var files = []

function printHelp( status ) {
	var print = status === 0 ? console.log : console.error
	var binName = path.basename( process.argv[ 1 ] )
	print( 'Usage: ' + binName + ' [-h, --help] [-v, --version]' )
	print( '       ' + binName + ' [-i, --indent INDENT] [-l, --line-end LINE_END] [-s, --starting-indent-level LEVEL] files...' )
	process.exit( status )
}

function printVersion() {
	console.log( version )
	process.exit( 0 )
}

for ( var i = 0; i < length; i++ ) {
	var arg = argv[ i ]
	if ( arg[ 0 ] === '-' ) {
		switch ( arg ) {
			case '-i':
			case '--indent':
				options.indent = argv[ ++i ]
				break
			case '-l':
			case '--line-end':
				options.lineEnd = argv[ ++i ]
				break
			case '-s':
			case '--starting-indent-level':
				options.startingIndentLevel = parseInt( argv[ ++i ] )
				break
			case '-h':
			case '--help':
				printHelp( 0 )
				break
			case '-v':
			case '--version':
				printVersion()
				break
			default:
				console.error( 'Option "' + arg + '" not supported.' )
				printHelp( 1 )
				break
		}
	} else {
		files.push( arg )
	}
}

options.output = process.stdout

if ( files.length === 0 ) {
	var data = ''
	process.stdin.setEncoding( 'utf8' )
	process.stdin.resume()
	process.stdin
	.on( 'data', function( chunk ) {
		data += chunk
	} )
	.on( 'end', function() {
		try {
			astring( JSON.parse( data ), options )
		} catch ( error ) {
			console.error( 'Error: ' + error.message )
			process.exit( 1 )
		}
	} )
} else {
	length = files.length
	var hasError = false
	for ( var i = 0; i < length; i++ ) {
		try {
			var file = files[ i ]
			astring( JSON.parse( fs.readFileSync( file, 'utf8' ) ), options )
		} catch ( error ) {
			console.error( 'Error: ' + error.message )
			if ( hasError !== true )
				hasError = true
		}
	}
	if ( hasError )
		process.exit( 1 )
}


